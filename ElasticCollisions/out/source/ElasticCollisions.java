/* autogenerated by Processing revision 1297 on 2025-07-06 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class ElasticCollisions extends PApplet {

int numOfParticles = 1000;
int minR = 10;
int maxR = 20;
int minV = 2;
int maxV = 5;
boolean paused;
Particle[] particles = new Particle[numOfParticles];

public int getBrightColor() {
    colorMode(HSB, 360, 100, 100);
    int c = color(random(360), 100, 100);
    colorMode(RGB, 255, 255, 255);
    return c;
}

public void createParticles() {
    for(int i=0; i<numOfParticles; i++) {

        float v = random(minV, maxV);
        float a = random(2 * PI);

        particles[i] = new Particle(
            random(width), random(height),
            v*cos(a), v*sin(a),
            random(minR, maxR),
            getBrightColor()
        );
    }
}

public void updateParticles() {
    for(int i=0; i<numOfParticles; i++) {
        particles[i].update();
        particles[i].bounceEdges();
    }
    for(int i=0; i<numOfParticles; i++) {
        for(int j=i+1; j<numOfParticles; j++) {
            particles[i].checkCollisionWith(particles[j]);
        }
    }
}

public void showParticles() {
    for(int i=0; i<numOfParticles; i++) {
        particles[i].show();
    }
}

public void setup() {
    // size(800, 800);
    /* size commented out by preprocessor */;
    createParticles();
}

public void draw() {
    if(!paused) {        
        background(0);
        updateParticles();
        showParticles();
    }
}

public void mousePressed() {
    if(
        mouseButton == LEFT &&
        mouseX >= 0 && mouseX <= width &&
        mouseY >= 0 && mouseY <= height
    ) {
        paused = !paused;
    }
}
class Particle {
    PVector pos, vel;
    int r;
    int col;

    Particle(float x, float y, float vx, float vy, float r, int col) {
        this.pos = new PVector(x, y);
        this.vel = new PVector(vx, vy);
        this.r = (int) r;
        this.col = col;
    }

    public void update() {
        this.pos.add(this.vel);
    }

    public void show() {
        fill(this.col);
        circle(this.pos.x, this.pos.y, 2*this.r);
    }

    public void bounceEdges() {
        if(this.pos.x < this.r) {
            this.vel.x *= -1;
            this.pos.x = this.r;
        }
        if(this.pos.x > width - this.r) {
            this.vel.x *= -1;
            this.pos.x = width - this.r;
        }
        if(this.pos.y < this.r) {
            this.vel.y *= -1;
            this.pos.y = this.r;
        }
        if(this.pos.y > height - this.r) {
            this.vel.y *= -1;
            this.pos.y = height - this.r;
        }
    }

    public void checkCollisionWith(Particle other) {
        float distance = dist(this.pos.x, this.pos.y, other.pos.x, other.pos.y);
        if (distance >= this.r + other.r) return; // No collision

        PVector posDiff = PVector.sub(other.pos, this.pos);
        PVector vDiff = PVector.sub(other.vel, this.vel);
        float dotProduct = vDiff.dot(posDiff);

        if (dotProduct > 0) return;

        float thisMass = this.r * this.r;
        float otherMass = other.r * other.r;
        float massSum = thisMass + otherMass;

        float scale1 = (2 * otherMass * dotProduct) / (massSum * distance * distance);
        float scale2 = (2 * thisMass * dotProduct) / (massSum * distance * distance);

        PVector deltaV1 = posDiff.copy().mult(scale1);
        PVector deltaV2 = posDiff.copy().mult(-scale2);

        this.vel.add(deltaV1);
        other.vel.add(deltaV2);

        float overlap = (this.r + other.r - distance) / 2;
        PVector separation = posDiff.copy().normalize().mult(overlap);
        this.pos.sub(separation);
        other.pos.add(separation);
    }

}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "ElasticCollisions" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
